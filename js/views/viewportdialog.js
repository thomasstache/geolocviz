define(
	["jquery", "backbone",
	 "hbs!../../templates/viewportdialog"],

	function($, Backbone, dialogTemplate) {

		var ViewportDialog = Backbone.View.extend({

			// tag,ID for the autogenerated node the view will be enclosed in
			tagName: "div",
			id: "viewportDialog",

			/** @type {LatLngBounds} the model with the viewport data */
			bounds: null,
			zoom: -1,

			events: {
				"click #btnApply": "applyClicked",
				"click #btnCancel": "close",
			},

			initialize: function() {

				this.bounds = this.options.bounds || null;
				this.zoom = this.options.zoom || null;
				this.render();
				this.updateControls();
			},

			// create the dialog nodes and insert into page DOM
			render: function() {

				this.$el.html(dialogTemplate());
				$(document.body).append(this.$el);

				return this;
			},

			// set the controls to the current model values
			updateControls: function() {

				if (this.bounds && !this.bounds.isEmpty()) {
					this.$("#boundsInput").val(ViewportDialog.serializeBounds(this.bounds));
					this.$("#centerInput").val(this.bounds.getCenter());
				}
				this.$("#zoomInput").val(this.zoom);
			},

			applyClicked: function() {

				this.trigger("viewport:set", this.bounds);
				this.remove();
			},

			close: function() {

				this.trigger("dialog:cancel");
				this.remove();
			},
		},
		{
			/**
			 * Format a bounds object in the canonical form.
			 * @param  {LatLngBounds} bounds
			 * @return {String}
			 */
			serializeBounds: function(bounds) {
				var text = "";

				if (!bounds.isEmpty()) {

					var ne = bounds.getNorthEast(),
						sw = bounds.getSouthWest();
					text = "{NE:" + ne + ",SW:" + sw +"}";
				}

				return text;
			},
		});

		return ViewportDialog;
	}
);
