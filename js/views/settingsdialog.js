define(
	["jquery", "backbone", "mousetrap",
	 "models/settings",
	 "hbs!templates/settingsdialog"],

	function($, Backbone, Mousetrap, Settings, dialogTemplate) {

		var SettingsDialog = Backbone.View.extend({

			constructor: function SettingsDialog() {
				Backbone.View.prototype.constructor.apply(this, arguments);
			},

			// tag,ID for the autogenerated node the view will be enclosed in
			tagName: "div",
			id: "settingsdialog",

			/** @type {Settings} the settings model */
			model: null,

			$probMobilityInput: null,
			$probIndoorInput: null,
			$confidenceThresholdInput: null,
			$checkUseDotIcons: null,
			$checkDynamicSectorColors: null,
			$softHeatmapThresholdInput: null,
			$hardHeatmapThresholdInput: null,
			$focusSessionMaxZoomInput: null,
			$focusSiteTargetZoomInput: null,

			events: {
				"click #btnApply": "applyClicked",
				"click #btnCancel": "close",
				"click #btnReset": "resetSettings",
			},

			keyboardHandler: null,

			initialize: function() {

				this.listenTo(this.model, "reset", this.updateControls);

				this.render();
				this.updateControls();

				this.keyboardHandler = new Mousetrap();
				this.keyboardHandler.bind("enter", this.applyClicked.bind(this));
				this.keyboardHandler.bind("esc", this.close.bind(this));
			},

			// create the dialog nodes and insert into page DOM
			render: function() {

				this.$el.html(dialogTemplate());
				$(document.body).append(this.$el);

				this.$checkCategorizeMarkers = this.$("#checkCategorizeMarkers");
				this.$probMobilityInput = this.$("#probMobilityInput");
				this.$probIndoorInput = this.$("#probIndoorInput");
				this.$confidenceThresholdInput = this.$("#confidenceThresholdInput");

				this.$softHeatmapThresholdInput = this.$("#softHeatmapThresholdInput");
				this.$hardHeatmapThresholdInput = this.$("#hardHeatmapThresholdInput");

				this.$checkUseDotIcons = this.$("#checkUseDotIcons");
				this.$checkDynamicSectorColors = this.$("#checkDynamicSectorColors");
				this.$focusSessionMaxZoomInput = this.$("#focusSessionMaxZoom");
				this.$focusSiteTargetZoomInput = this.$("#focusSiteTargetZoom");

				this.$("#btnApply").focus();

				return this;
			},

			// set the controls to the current model values
			updateControls: function() {

				this.$probMobilityInput.val(toPercent(this.model.get("mobilityThreshold")));
				this.$probIndoorInput.val(toPercent(this.model.get("indoorThreshold")));
				this.$confidenceThresholdInput.val(toPercent(this.model.get("confidenceThreshold")));

				this.$softHeatmapThresholdInput.val(this.model.get("heatmapSuggestionThreshold"));
				this.$hardHeatmapThresholdInput.val(this.model.get("maxResultMarkers"));

				this.$focusSessionMaxZoomInput.val(this.model.get("focusSessionMaxZoom"));
				this.$focusSiteTargetZoomInput.val(this.model.get("focusSiteTargetZoom"));

				this.$checkCategorizeMarkers.prop("checked", this.model.get("categorizeMarkers"));
				this.$checkUseDotIcons.prop("checked", this.model.get("useDotAccuracyMarkers"));
				this.$checkDynamicSectorColors.prop("checked", this.model.get("useDynamicSectorColors"));
			},

			/**
			 * Handler for the "Reset" button in the dialog.
			 */
			resetSettings: function() {

				if (confirm("This will revert all settings to their defaults..."))
					this.model.reset();
			},

			applyClicked: function() {

				var probMobility = parseFloat(this.$probMobilityInput.val()),
					probIndoor = parseFloat(this.$probIndoorInput.val()),
					confThreshold = parseFloat(this.$confidenceThresholdInput.val()),
					heatmapSoftThreshold = parseInt(this.$softHeatmapThresholdInput.val(), 10),
					heatmapHardThreshold = parseInt(this.$hardHeatmapThresholdInput.val(), 10),
					focusSessionMaxZoom = parseInt(this.$focusSessionMaxZoomInput.val(), 10),
					focusSiteTargetZoom = parseInt(this.$focusSiteTargetZoomInput.val(), 10);

				this.model.set({
					mobilityThreshold: fromPercent(probMobility),
					indoorThreshold: fromPercent(probIndoor),
					confidenceThreshold: fromPercent(confThreshold),
					maxResultMarkers: heatmapHardThreshold,
					heatmapSuggestionThreshold: heatmapSoftThreshold,
					focusSessionMaxZoom: focusSessionMaxZoom,
					focusSiteTargetZoom: focusSiteTargetZoom,
					useDotAccuracyMarkers: this.$checkUseDotIcons.prop("checked"),
					useDynamicSectorColors: this.$checkDynamicSectorColors.prop("checked"),
					categorizeMarkers: this.$checkCategorizeMarkers.prop("checked"),
				});

				this.trigger("dialog:apply");
				this.remove();
			},

			close: function() {

				this.trigger("dialog:cancel");
				this.remove();
			},

			remove: function() {
				this.keyboardHandler.reset();
				this.keyboardHandler = null;
				Backbone.View.prototype.remove.apply(this, arguments);
			},
		});

		function toPercent(val) {
			return val * 100.0;
		}

		function fromPercent(val) {
			return val / 100.0;
		}

		return SettingsDialog;
	}
);
