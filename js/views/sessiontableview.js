define(

	["jquery", "underscore", "backbone",
	 "collections/sortablecollection",
	 "models/session", "types/searchquery",
	 "hbs!templates/sessiontable", "hbs!templates/sessiontablerows"],

	function($, _, Backbone,
			 SortableCollection, Session, SearchQuery,
			 tableDialogTemplate, bodyTemplate) {

		var SessionTableView = Backbone.View.extend({

			// tag,ID for the autogenerated node the view will be enclosed in
			tagName: "div",
			id: "sessionTableDialog",
			className: "tableView",

			// array of the table column headers
			$tableHeaders: null,
			// the (scrolling) table with the data
			$tableBody: null,

			/** @type {SessionList} */
			sessions: null,
			/** @type {SortableCollection} */
			collection: null,

			events: {
				"click #btnClose": "close",
				"click #btnHide": "hide",
				"click th": "headerClick",
				"click .selectSession": "selectSessionClick",
			},

			initialize: function(options) {

				var sessions = options.sessions || null;

				if (sessions) {

					this.sessions = sessions;
					this.collection = new SortableCollection();

					this.fillCollectionWithSessions();

					this.collection.setSortAttribute("sessionId")
								   .setSortDirection(SortableCollection.SORT_ASCENDING)
								   .sort();

					this.render();

					this.listenTo(this.collection, "sort", this.updateTable);
				}
			},

			/**
			 * Create a sortable collection with the extracted session "info"
			 */
			fillCollectionWithSessions: function() {

				var sessionInfo = this.sessions.map(function(session) {
					return session.getInfo();
				});

				this.collection.reset(sessionInfo);
			},

			// create the dialog and insert into page DOM
			render: function() {

				var columns = [
					{ attribute: "sessionId",    caption: "ID", isSorted: true, dirDesc: false },
					{ attribute: "resultCount",  caption: "Results" },
					{ attribute: "confidence",   caption: "Confidence" },
					{ attribute: "probMobility", caption: "Mobility Prob." },
					{ attribute: "probIndoor",   caption: "Indoor Prob." },
					{ attribute: "distance",     caption: "Distance", unit: "m" },
					{ attribute: "duration",     caption: "Duration", unit: "s" },
					{ attribute: "meanSpeed",    caption: "Speed",    unit: "km/h" },
				];
				var context = {
					title: "All Sessions",
					columns: columns
				};

				this.$el.html(tableDialogTemplate(context));
				$(document.body).append(this.$el);

				this.$tableHeaders = this.$("#tableHead th");
				this.$tableBody = this.$("#tableBody");

				this.updateTable();

				return this;
			},

			// Render the table body with the current sort configuration.
			updateTable: function() {

				if (this.$tableBody !== null) {

					// convert Models to JS objects
					var data = this.collection.map(function(info) {
						return info.toJSON();
					});

					var context = {
						sessions: data,
					};

					this.$tableBody.html(bodyTemplate(context));
				}

				return this;
			},

			/**
			 * Remove all sort indication decoration classes from the column headers.
			 */
			resetHeaderClasses: function() {

				this.$tableHeaders.removeClass("sorted descending");
			},

			/**
			 * Handler for clicks on the table column headers. Sort data accordingly.
			 * @param  {Event} evt jQuery click event
			 */
			headerClick: function(evt) {

				if (!evt.currentTarget)
					return;

				var el = evt.currentTarget;
				if (el.dataset &&
					el.dataset.modelattr !== undefined) {

					var sortAttr = el.dataset.modelattr;

					// flip sort direction, if same column
					if (this.collection.sortAttribute === sortAttr) {
						this.collection.invertDirection().sort();

						$(el).toggleClass("descending");
					}
					else {
						this.collection.setSortAttribute(sortAttr)
									   .setSortDirection(SortableCollection.SORT_DESCENDING)
									   .sort();

						this.resetHeaderClasses();
						el.classList.add("sorted");
						el.classList.add("descending");
					}
				}
			},

			/**
			 * Handler for clicks on linkified session Ids.
			 * @param  {Event} evt The jQuery click event
			 */
			selectSessionClick: function(evt) {
				evt.preventDefault();

				var strSessionId = evt.currentTarget.textContent;
				this.trigger("search", new SearchQuery(SearchQuery.TOPIC_SESSION, strSessionId));
			},

			/**
			 * Redisplays the popup dialog. The collection is updated to include all sessions.
			 */
			reshow: function() {

				this.fillCollectionWithSessions();
				this.updateTable();
				this.$el.show();
			},

			/**
			 * Temporarily hides the popup view, retaining state.
			 */
			hide: function() {

				this.$el.hide();
			},

			/**
			 * Closes the popup view, and destroys it.
			 */
			close: function() {

				this.trigger("dialog:cancel");
				this.remove();
			},
		});

		return SessionTableView;
	}
);